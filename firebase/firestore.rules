rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Check if user is an admin
    function isAdmin() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Check if user is an instructor
    function isInstructor() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'instructor';
    }

    // Check if user is an instructor with active status
    function isActiveInstructor() {
      return isInstructor() && 
        exists(/databases/$(database)/documents/instructors/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/instructors/$(request.auth.uid)).data.accessStatus == 'green';
    }

    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated() && (request.auth.uid == userId || isAdmin());
      allow write: if isAdmin();
    }

    // Instructors collection
    match /instructors/{instructorId} {
      allow read: if isAuthenticated() && (
        isAdmin() || 
        request.auth.uid == instructorId
      );
      allow write: if isAdmin();
    }

    // Forum threads collection
    match /forum_threads/{threadId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && (isAdmin() || isActiveInstructor()) &&
        request.resource.data.authorId == request.auth.uid;
      allow update: if isAuthenticated() && 
        (resource.data.authorId == request.auth.uid || isAdmin());
      allow delete: if isAuthenticated() && isAdmin();
    }

    // Activities collection
    match /activities/{activityId} {
      allow read: if isAuthenticated();
      allow create, update: if isAdmin() || isActiveInstructor();
      allow delete: if isAdmin();
    }

    // Sessions collection
    match /sessions/{sessionId} {
      allow read: if isAuthenticated();
      allow create: if isAdmin();
      allow update: if isAdmin() || (
        isActiveInstructor() && 
        resource.data.instructorId == request.auth.uid
      );
      allow delete: if isAdmin();
    }

    // Tutorials collection
    match /tutorials/{tutorialId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    // Clients collection
    match /clients/{clientId} {
      allow read: if isAuthenticated() && isAdmin();
      allow write: if isAuthenticated() && isAdmin();
    }

    // Contracts collection
    match /contracts/{contractId} {
      allow read: if isAuthenticated() && isAdmin();
      allow create, update: if isAuthenticated() && isAdmin();
      allow delete: if isAuthenticated() && isAdmin();
    }

    // Default deny
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
